# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
#   timestamp: 2022-01-12T15:16:55+00:00

from __future__ import annotations

from enum import Enum
from typing import (
    Any,
    Dict,
    List,
    Optional,
    Union,
)

from pydantic import (
    BaseModel,
    Extra,
    Field,
    constr,
)


class Config1(BaseModel):
    class Config:
        extra = Extra.forbid

    source: Optional[str]
    target: Optional[str]
    uid: Optional[str]
    gid: Optional[str]
    mode: Optional[float]


class CredentialSpec(BaseModel):
    class Config:
        extra = Extra.forbid

    config: Optional[str]
    file: Optional[str]
    registry: Optional[str]


class Condition(Enum):
    service_started = 'service_started'
    service_healthy = 'service_healthy'
    service_completed_successfully = 'service_completed_successfully'


class DependsOn(BaseModel):
    class Config:
        extra = Extra.forbid

    condition: Condition


class Extend(BaseModel):
    class Config:
        extra = Extra.forbid

    service: str
    file: Optional[str]


class Logging(BaseModel):
    class Config:
        extra = Extra.forbid

    driver: Optional[str]
    options: Optional[Dict[constr(regex=r'^.+$'), Optional[Union[str, float]]]]  # type: ignore [valid-type]


class Port(BaseModel):
    class Config:
        extra = Extra.forbid

    mode: Optional[str]
    host_ip: Optional[str]
    target: Optional[int]
    published: Optional[Union[str, int]]
    protocol: Optional[str]


class PullPolicy(Enum):
    always = 'always'
    never = 'never'
    if_not_present = 'if_not_present'
    build = 'build'
    missing = 'missing'


class Secret1(BaseModel):
    class Config:
        extra = Extra.forbid

    source: Optional[str]
    target: Optional[str]
    uid: Optional[str]
    gid: Optional[str]
    mode: Optional[float]


class Ulimit(BaseModel):
    class Config:
        extra = Extra.forbid

    hard: int
    soft: int


class Selinux(Enum):
    z = 'z'
    z_1 = 'Z'


class Bind(BaseModel):
    class Config:
        extra = Extra.forbid

    propagation: Optional[str]
    create_host_path: Optional[bool]
    selinux: Optional[Selinux]


class Volume2(BaseModel):
    class Config:
        extra = Extra.forbid

    nocopy: Optional[bool]


class SizeItem(BaseModel):
    __root__: int = Field(..., ge=0.0)


class Tmpfs(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[Union[SizeItem, str]]


class Volume1(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str
    source: Optional[str]
    target: Optional[str]
    read_only: Optional[bool]
    consistency: Optional[str]
    bind: Optional[Bind]
    volume: Optional[Volume2]
    tmpfs: Optional[Tmpfs]


class Healthcheck(BaseModel):
    class Config:
        extra = Extra.forbid

    disable: Optional[bool]
    interval: Optional[str]
    retries: Optional[int]
    test: Optional[Union[str, List[str]]]
    timeout: Optional[str]
    start_period: Optional[str]


class Order(Enum):
    start_first = 'start-first'
    stop_first = 'stop-first'


class RollbackConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    parallelism: Optional[int]
    delay: Optional[str]
    failure_action: Optional[str]
    monitor: Optional[str]
    max_failure_ratio: Optional[float]
    order: Optional[Order]


class Order1(Enum):
    start_first = 'start-first'
    stop_first = 'stop-first'


class UpdateConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    parallelism: Optional[int]
    delay: Optional[str]
    failure_action: Optional[str]
    monitor: Optional[str]
    max_failure_ratio: Optional[float]
    order: Optional[Order1]


class Limits(BaseModel):
    class Config:
        extra = Extra.forbid

    cpus: Optional[Union[float, str]]
    memory: Optional[str]
    pids: Optional[int]


class RestartPolicy(BaseModel):
    class Config:
        extra = Extra.forbid

    condition: Optional[str]
    delay: Optional[str]
    max_attempts: Optional[int]
    window: Optional[str]


class Preference(BaseModel):
    class Config:
        extra = Extra.forbid

    spread: Optional[str]


class Placement(BaseModel):
    class Config:
        extra = Extra.forbid

    constraints: Optional[List[str]]
    preferences: Optional[List[Preference]]
    max_replicas_per_node: Optional[int]


class DiscreteResourceSpec(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: Optional[str]
    value: Optional[float]


class GenericResource(BaseModel):
    class Config:
        extra = Extra.forbid

    discrete_resource_spec: Optional[DiscreteResourceSpec]


class GenericResources(BaseModel):
    __root__: List[GenericResource]


class ConfigItem(BaseModel):
    class Config:
        extra = Extra.forbid

    subnet: Optional[str]
    ip_range: Optional[str]
    gateway: Optional[str]
    aux_addresses: Optional[Dict[constr(regex=r'^.+$'), str]]  # type: ignore [valid-type]


class Ipam(BaseModel):
    class Config:
        extra = Extra.forbid

    driver: Optional[str]
    config: Optional[List[ConfigItem]]
    options: Optional[Dict[constr(regex=r'^.+$'), str]]  # type: ignore [valid-type]


class External(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]


class External1(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]


class External2(BaseModel):
    name: Optional[str]


class External3(BaseModel):
    name: Optional[str]


class ListOrDict(BaseModel):
    __root__: Union[
        Dict[constr(regex=r'.+'), Optional[Union[str, float, bool]]], List[str]]  # type: ignore [valid-type]


class BlkioLimit(BaseModel):
    class Config:
        extra = Extra.forbid

    path: Optional[str]
    rate: Optional[Union[int, str]]


class BlkioWeight(BaseModel):
    class Config:
        extra = Extra.forbid

    path: Optional[str]
    weight: Optional[int]


class Constraints(BaseModel):
    __root__: Any


class BuildItem(BaseModel):
    class Config:
        extra = Extra.forbid

    context: Optional[str]
    dockerfile: Optional[str]
    args: Optional[ListOrDict]
    labels: Optional[ListOrDict]
    cache_from: Optional[List[str]]
    network: Optional[str]
    target: Optional[str]
    shm_size: Optional[Union[int, str]]
    extra_hosts: Optional[ListOrDict]
    isolation: Optional[str]


class BlkioConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    device_read_bps: Optional[List[BlkioLimit]]
    device_read_iops: Optional[List[BlkioLimit]]
    device_write_bps: Optional[List[BlkioLimit]]
    device_write_iops: Optional[List[BlkioLimit]]
    weight: Optional[int]
    weight_device: Optional[List[BlkioWeight]]


class Network1(BaseModel):
    class Config:
        extra = Extra.forbid

    aliases: Optional[List[str]]
    ipv4_address: Optional[str]
    ipv6_address: Optional[str]
    link_local_ips: Optional[List[str]]
    priority: Optional[float]


class Device(BaseModel):
    class Config:
        extra = Extra.forbid

    capabilities: Optional[List[str]]
    count: Optional[Union[str, int]]
    device_ids: Optional[List[str]]
    driver: Optional[str]
    options: Optional[ListOrDict]


class Devices(BaseModel):
    __root__: List[Device]


class Network(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]
    driver: Optional[str]
    driver_opts: Optional[Dict[constr(regex=r'^.+$'), Union[str, float]]]  # type: ignore [valid-type]
    ipam: Optional[Ipam]
    external: Optional[External]
    internal: Optional[bool]
    enable_ipv6: Optional[bool]
    attachable: Optional[bool]
    labels: Optional[ListOrDict]


class Volume(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]
    driver: Optional[str]
    driver_opts: Optional[Dict[constr(regex=r'^.+$'), Union[str, float]]]  # type: ignore [valid-type]
    external: Optional[External1]
    labels: Optional[ListOrDict]


class Secret(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]
    file: Optional[str]
    external: Optional[External2]
    labels: Optional[ListOrDict]
    driver: Optional[str]
    driver_opts: Optional[Dict[constr(regex=r'^.+$'), Union[str, float]]]  # type: ignore [valid-type]
    template_driver: Optional[str]


class Config(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str]
    file: Optional[str]
    external: Optional[External3]
    labels: Optional[ListOrDict]
    template_driver: Optional[str]


class StringOrList(BaseModel):
    __root__: Union[str, List[str]]


class Reservations(BaseModel):
    class Config:
        extra = Extra.forbid

    cpus: Optional[Union[float, str]]
    memory: Optional[str]
    generic_resources: Optional[GenericResources]
    devices: Optional[Devices]


class Resources(BaseModel):
    class Config:
        extra = Extra.forbid

    limits: Optional[Limits]
    reservations: Optional[Reservations]


class Deployment(BaseModel):
    class Config:
        extra = Extra.forbid

    mode: Optional[str]
    endpoint_mode: Optional[str]
    replicas: Optional[int]
    labels: Optional[ListOrDict]
    rollback_config: Optional[RollbackConfig]
    update_config: Optional[UpdateConfig]
    resources: Optional[Resources]
    restart_policy: Optional[RestartPolicy]
    placement: Optional[Placement]


class Service(BaseModel):
    class Config:
        extra = Extra.forbid

    deploy: Optional[Deployment]
    build: Optional[Union[str, BuildItem]]
    blkio_config: Optional[BlkioConfig]
    cap_add: Optional[List[str]]
    cap_drop: Optional[List[str]]
    cgroup_parent: Optional[str]
    command: Optional[Union[str, List[str]]]
    configs: Optional[List[Union[str, Config1]]]
    container_name: Optional[str]
    cpu_count: Optional[int] = Field(None, ge=0.0)
    cpu_percent: Optional[int] = Field(None, ge=0.0, le=100.0)
    cpu_shares: Optional[Union[float, str]]
    cpu_quota: Optional[Union[float, str]]
    cpu_period: Optional[Union[float, str]]
    cpu_rt_period: Optional[Union[float, str]]
    cpu_rt_runtime: Optional[Union[float, str]]
    cpus: Optional[Union[float, str]]
    cpuset: Optional[str]
    credential_spec: Optional[CredentialSpec]
    depends_on: Optional[
        Union[List[str], Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), DependsOn]]]  # type: ignore [valid-type]
    device_cgroup_rules: Optional[List[str]]
    devices: Optional[List[str]]
    dns: Optional[StringOrList]
    dns_opt: Optional[List[str]]
    dns_search: Optional[StringOrList]
    domainname: Optional[str]
    entrypoint: Optional[Union[str, List[str]]]
    env_file: Optional[StringOrList]
    environment: Optional[ListOrDict]
    expose: Optional[List[Union[str, float]]]
    extends: Optional[Union[str, Extend]]
    external_links: Optional[List[str]]
    extra_hosts: Optional[ListOrDict]
    group_add: Optional[List[Union[str, float]]]
    healthcheck: Optional[Healthcheck]
    hostname: Optional[str]
    image: Optional[str]
    init: Optional[bool]
    ipc: Optional[str]
    isolation: Optional[str]
    labels: Optional[ListOrDict]
    links: Optional[List[str]]
    logging: Optional[Logging]
    mac_address: Optional[str]
    mem_limit: Optional[Union[float, str]]
    mem_reservation: Optional[Union[str, int]]
    mem_swappiness: Optional[int]
    memswap_limit: Optional[Union[float, str]]
    network_mode: Optional[str]
    networks: Optional[
        Union[List[str], Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Optional[Network1]]]]  # type: ignore [valid-type]
    oom_kill_disable: Optional[bool]
    oom_score_adj: Optional[int] = Field(None, ge=-1000.0, le=1000.0)
    pid: Optional[Optional[str]]
    pids_limit: Optional[Union[float, str]]
    platform: Optional[str]
    ports: Optional[List[Union[float, str, Port]]]
    privileged: Optional[bool]
    profiles: Optional[List[str]]
    pull_policy: Optional[PullPolicy]
    read_only: Optional[bool]
    restart: Optional[str]
    runtime: Optional[str]
    scale: Optional[int]
    security_opt: Optional[List[str]]
    shm_size: Optional[Union[float, str]]
    secrets: Optional[List[Union[str, Secret1]]]
    sysctls: Optional[ListOrDict]
    stdin_open: Optional[bool]
    stop_grace_period: Optional[str]
    stop_signal: Optional[str]
    storage_opt: Optional[Dict[str, Any]]
    tmpfs: Optional[StringOrList]
    tty: Optional[bool]
    ulimits: Optional[Dict[constr(regex=r'^[a-z]+$'), Union[int, Ulimit]]]  # type: ignore [valid-type]
    user: Optional[str]
    userns_mode: Optional[str]
    volumes: Optional[List[Union[str, Volume1]]]
    volumes_from: Optional[List[str]]
    working_dir: Optional[str]


class ComposeSpecification(BaseModel):
    class Config:
        extra = Extra.forbid

    version: Optional[str] = Field(
        None,
        description='Version of the Compose specification used. Tools not implementing required version MUST reject the configuration file.'
        )
    services: Optional[Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Service]]  # type: ignore [valid-type]
    networks: Optional[Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Network]]  # type: ignore [valid-type]
    volumes: Optional[Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Volume]]  # type: ignore [valid-type]
    secrets: Optional[Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Secret]]  # type: ignore [valid-type]
    configs: Optional[Dict[constr(regex=r'^[a-zA-Z0-9._-]+$'), Config]]  # type: ignore [valid-type]
